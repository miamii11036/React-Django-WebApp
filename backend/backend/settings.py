"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path  #python內建，處理檔案與目錄路徑
from datetime import timedelta #python內建，時間間隔，用在Token管理
from dotenv import load_dotenv #來自python-dotenv，載入.env環境變數檔案
import os #與作業系統互動，如讀取環境變數、處理檔案與目錄路徑

load_dotenv() #從env檔加載環境變數

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xs4+mawek78511gy92a2zazxdil7x36a0@$*yg#_bupm4@wl0s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#允許伺服器接收request的主機名稱列表，防止HTTP Host Header攻擊
ALLOWED_HOSTS = ["*"]  
#["*"]接收任何主機的request，在生產環境建議改成被允許的網域如 ["example.com", "www.example.com"]

#設定Django REST Framework（DRF） 
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ( #將預設的Session驗證改成JWT身份驗證，如此讓API端點在提供資料前先驗證對方的JWT
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ( #設定 預設權限為已驗證用戶（Authenticated User），未登入的用戶無法存取 API並收到401錯誤
        "rest_framework.permissions.IsAuthenticated",
    ),
}

#控制JWT行為
SIMPLE_JWT = { 
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30), #存取Token的有效時限為30分鐘
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1), #更新Token的有效時限為1天
    
}

# Application definition
#Django啟動後被自動加載的應用程序列表，當Django剛啟動時會初始化和配置這些程序
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "api", #新增剛才用startapp建立的Django應用程式
    "rest_framework", #提供API View、序列化、身份驗證、權限控制功能，達到開發API目的。這裡是確保DRF有正確啟動
    "rest_framework_simplejwt", #確保有正確套入並啟動JWT驗證
    "corsheaders" #處理跨來源資源共用(CORS)，只允許核可的網域存取API
]

MIDDLEWARE = [
    #CorsMiddleware處理來自不同網域的CORS預檢request，檢查該網域是否被列在許可清單中
    "corsheaders.middleware.CorsMiddleware", 
    #確保CORS的檢查在其他中介層之前，處理預檢request，若放在最後一個其他中介層可能會攔截這些預檢請求，導致CORS禁止request取得資源
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "api.middleware.ErrorLoggingMiddleware",
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Taipei' #時區改成台北時區

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#允許所有網域的跨域請求，只適合在開發環境或開放api使用，生產環境時請新增["http://localhost:3000","https://myfrontend.com",]
CORS_ALLOW_ALL_ORIGINS = True 
#允許帶有憑證的跨域請求（如 Cookies、HTTP 認證、Session等），讓瀏覽器可攜帶這些東西向API請求資源。
#當CORS_ALLOW_ALL_ORIGINS = True 時，CORS_ALLOWS_CREDENTIALS不能為True
CORS_ALLOWS_CREDENTIALS = ["http://localhost:8000"]

#將Django預設的User model指定自定義的User model - CustomUser
# AUTH_USER_MODEL = "api.CustomUser"

#將Django運行時遇到的所有錯誤載入到errors.log中
ERROR_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    "version":1,
    "disable_existing_loggers": False,
    "formatters":{
        "verbose":{
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        }
    },
    "handlers": {
        "file":{
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(ERROR_DIR, "logs", "errors.log"),  # 儲存到 logs/errors.log檔案中
            "formatter": "verbose",
        },
    },
    "loggers": {
        "api": { #定義名為api的logger，其會將錯誤紀錄到error.log
            "handlers": ["file"],  # 使用 "file" 處理器，將日誌寫入檔案
            "level": "ERROR",
            "propagate": True,
        },#當logger = logging.getLogger("api")被呼叫時，會去 LOGGING["loggers"] 找 "api" 這個 Logger
    },
}

